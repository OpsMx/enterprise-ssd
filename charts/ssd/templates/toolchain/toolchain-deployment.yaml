apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ssd
    component: toolchain
{{ include "ssd.standard-labels" . | indent 4 }}
  name: tool-chain
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ssd
      component: toolchain
  template:
    metadata:
      labels:
        app: ssd
        component: toolchain
{{- if .Values.customLabels }}
{{ toYaml .Values.customLabels | indent 8}}
{{- end }}
      annotations:
{{- if .Values.toolchain.annotations -}}
        {{ toYaml .Values.toolchain.annotations | nindent 8 }}
{{- end }}
    spec:
      initContainers:
      - name: temporalfrontend-check
        image: {{ .Values.global.customImages.registry }}/pgchecker:v1
        command:
          - sh
          - -c
          - |
            echo 'Waiting for TEMPORAL-FRONTEND to become ready...'
            until printf "." && nc -z -w 2 {{ .Release.Name }}-temporal-frontend 7233; do
               sleep 2;
            done;
            echo 'TEMPORAL-FRONTEND OK âœ“'
      containers:
        - name: tool-chain
          image: {{ template "toolchain.image" . }}
          env:
          - name: GRAPHQL_URL
            value: http://dgraph-public:8080/graphql
          - name: S3_ENDPOINT_URL
            value: http://{{ .Release.Name }}-minio:9000/
          - name: TEMPORAL_HOSTPORT
            value: {{ .Release.Name }}-temporal-frontend:7233
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: accesskey
                name: {{ .Release.Name }}-minio
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: secretkey
                name: {{ .Release.Name }}-minio
          - name: Cypher_Key
            valueFrom:
              secretKeyRef:
                key: AESEncryptionKey
                name: ssdsecret
          - name: TMPDIR
            value: /scratch
          envFrom:
          - configMapRef:
              name: ssd-proxy-certs
              optional: true
          ports:
            - containerPort: 8100
              protocol: TCP
          volumeMounts:
            - mountPath: /scratch
              name: scratch-volume
            - name: scanresult
              mountPath: /tools/scanResult
            - name: tool-chain-volume
              mountPath: /tools/config/tool-chain.yaml
              subPath: tool-chain.yaml
            - mountPath: /usr/local/share/ca-certificates
              name: custom-certs
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /health
              port: 8100
              scheme: HTTP
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1

      {{- if .Values.toolchain.securityContext }}
          securityContext:
      {{ toYaml .Values.toolchain.securityContext | nindent 12 }}
      {{- else }}
          securityContext: {{ default "{}" }}
      {{- end }}

      {{- if .Values.imagePullSecret }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecret }}
      {{- end }}
      volumes:
        - name: scanresult
          emptyDir: {}
        - name: tool-chain-volume
          configMap:
            name: tool-chain
            items:
              - key: tool-chain.yaml
                path: tool-chain.yaml
            defaultMode: 420
        - name: ssd-proxy-certs
          configMap:
            defaultMode: 420
            optional: true
            name: ssd-proxy-certs
        - name: custom-certs  # Optional: In case we are using any customer-specific custom CAs
          configMap:
            defaultMode: 420
            items:
            - key: ca.crt
              path: ca.crt
            optional: true
            name: customer-custon-ca
        - name: scratch-volume
          ephemeral:
        {{- if .Values.noPvc }}
          emptyDir: {}
        {{- else }}
            volumeClaimTemplate:
              spec:
                accessModes:
                - {{ .Values.toolchain.persistence.accessMode }}
                resources:
                  requests:
                    storage: {{ .Values.toolchain.persistence.size }}
                volumeMode: Filesystem
        {{- end }}
      restartPolicy: Always
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}


